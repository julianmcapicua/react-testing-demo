schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    """
    measured in seconds
    """
    ttl: Int! = 60
    """
    refresh the cache entry
    """
    refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    """
    does the column match the given case-insensitive pattern
    """
    _ilike: String
    _in: [String!]
    """
    does the column match the given POSIX regular expression, case insensitive
    """
    _iregex: String
    _is_null: Boolean
    """
    does the column match the given pattern
    """
    _like: String
    _lt: String
    _lte: String
    _neq: String
    """
    does the column NOT match the given case-insensitive pattern
    """
    _nilike: String
    _nin: [String!]
    """
    does the column NOT match the given POSIX regular expression, case insensitive
    """
    _niregex: String
    """
    does the column NOT match the given pattern
    """
    _nlike: String
    """
    does the column NOT match the given POSIX regular expression, case sensitive
    """
    _nregex: String
    """
    does the column NOT match the given SQL regular expression
    """
    _nsimilar: String
    """
    does the column match the given POSIX regular expression, case sensitive
    """
    _regex: String
    """
    does the column match the given SQL regular expression
    """
    _similar: String
}

"""
columns and relationships of "listas"
"""
type listas {
    id: Int!
    list: String!
}

"""
aggregated selection of "listas"
"""
type listas_aggregate {
    aggregate: listas_aggregate_fields
    nodes: [listas!]!
}

"""
aggregate fields of "listas"
"""
type listas_aggregate_fields {
    avg: listas_avg_fields
    count(columns: [listas_select_column!], distinct: Boolean): Int!
    max: listas_max_fields
    min: listas_min_fields
    stddev: listas_stddev_fields
    stddev_pop: listas_stddev_pop_fields
    stddev_samp: listas_stddev_samp_fields
    sum: listas_sum_fields
    var_pop: listas_var_pop_fields
    var_samp: listas_var_samp_fields
    variance: listas_variance_fields
}

"""
aggregate avg on columns
"""
type listas_avg_fields {
    id: Float
}

"""
Boolean expression to filter rows from the table "listas". All fields are combined with a logical 'AND'.
"""
input listas_bool_exp {
    _and: [listas_bool_exp!]
    _not: listas_bool_exp
    _or: [listas_bool_exp!]
    id: Int_comparison_exp
    list: String_comparison_exp
}

"""
unique or primary key constraints on table "listas"
"""
enum listas_constraint {
    """
    unique or primary key constraint
    """
    listas_id_key
    """
    unique or primary key constraint
    """
    listas_pkey
}

"""
input type for incrementing numeric columns in table "listas"
"""
input listas_inc_input {
    id: Int
}

"""
input type for inserting data into table "listas"
"""
input listas_insert_input {
    id: Int
    list: String
}

"""
aggregate max on columns
"""
type listas_max_fields {
    id: Int
    list: String
}

"""
aggregate min on columns
"""
type listas_min_fields {
    id: Int
    list: String
}

"""
response of any mutation on the table "listas"
"""
type listas_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [listas!]!
}

"""
on conflict condition type for table "listas"
"""
input listas_on_conflict {
    constraint: listas_constraint!
    update_columns: [listas_update_column!]! = []
    where: listas_bool_exp
}

"""
Ordering options when selecting data from "listas".
"""
input listas_order_by {
    id: order_by
    list: order_by
}

"""
primary key columns input for table: listas
"""
input listas_pk_columns_input {
    id: Int!
}

"""
select columns of table "listas"
"""
enum listas_select_column {
    """
    column name
    """
    id
    """
    column name
    """
    list
}

"""
input type for updating data in table "listas"
"""
input listas_set_input {
    id: Int
    list: String
}

"""
aggregate stddev on columns
"""
type listas_stddev_fields {
    id: Float
}

"""
aggregate stddev_pop on columns
"""
type listas_stddev_pop_fields {
    id: Float
}

"""
aggregate stddev_samp on columns
"""
type listas_stddev_samp_fields {
    id: Float
}

"""
aggregate sum on columns
"""
type listas_sum_fields {
    id: Int
}

"""
update columns of table "listas"
"""
enum listas_update_column {
    """
    column name
    """
    id
    """
    column name
    """
    list
}

"""
aggregate var_pop on columns
"""
type listas_var_pop_fields {
    id: Float
}

"""
aggregate var_samp on columns
"""
type listas_var_samp_fields {
    id: Float
}

"""
aggregate variance on columns
"""
type listas_variance_fields {
    id: Float
}

"""
mutation root
"""
type mutation_root {
    """
    delete data from the table: "listas"
    """
    delete_listas(
        """
        filter the rows which have to be deleted
        """
        where: listas_bool_exp!
    ): listas_mutation_response
    """
    delete single row from the table: "listas"
    """
    delete_listas_by_pk(id: Int!): listas
    """
    delete data from the table: "usuarios"
    """
    delete_usuarios(
        """
        filter the rows which have to be deleted
        """
        where: usuarios_bool_exp!
    ): usuarios_mutation_response
    """
    delete single row from the table: "usuarios"
    """
    delete_usuarios_by_pk(id: Int!): usuarios
    """
    delete data from the table: "yugioh_names"
    """
    delete_yugioh_names(
        """
        filter the rows which have to be deleted
        """
        where: yugioh_names_bool_exp!
    ): yugioh_names_mutation_response
    """
    delete single row from the table: "yugioh_names"
    """
    delete_yugioh_names_by_pk(id: Int!): yugioh_names
    """
    insert data into the table: "listas"
    """
    insert_listas(
        """
        the rows to be inserted
        """
        objects: [listas_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: listas_on_conflict
    ): listas_mutation_response
    """
    insert a single row into the table: "listas"
    """
    insert_listas_one(
        """
        the row to be inserted
        """
        object: listas_insert_input!
        """
        on conflict condition
        """
        on_conflict: listas_on_conflict
    ): listas
    """
    insert data into the table: "usuarios"
    """
    insert_usuarios(
        """
        the rows to be inserted
        """
        objects: [usuarios_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: usuarios_on_conflict
    ): usuarios_mutation_response
    """
    insert a single row into the table: "usuarios"
    """
    insert_usuarios_one(
        """
        the row to be inserted
        """
        object: usuarios_insert_input!
        """
        on conflict condition
        """
        on_conflict: usuarios_on_conflict
    ): usuarios
    """
    insert data into the table: "yugioh_names"
    """
    insert_yugioh_names(
        """
        the rows to be inserted
        """
        objects: [yugioh_names_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: yugioh_names_on_conflict
    ): yugioh_names_mutation_response
    """
    insert a single row into the table: "yugioh_names"
    """
    insert_yugioh_names_one(
        """
        the row to be inserted
        """
        object: yugioh_names_insert_input!
        """
        on conflict condition
        """
        on_conflict: yugioh_names_on_conflict
    ): yugioh_names
    """
    update data of the table: "listas"
    """
    update_listas(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: listas_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: listas_set_input
        """
        filter the rows which have to be updated
        """
        where: listas_bool_exp!
    ): listas_mutation_response
    """
    update single row of the table: "listas"
    """
    update_listas_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: listas_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: listas_set_input
        pk_columns: listas_pk_columns_input!
    ): listas
    """
    update data of the table: "usuarios"
    """
    update_usuarios(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: usuarios_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: usuarios_set_input
        """
        filter the rows which have to be updated
        """
        where: usuarios_bool_exp!
    ): usuarios_mutation_response
    """
    update single row of the table: "usuarios"
    """
    update_usuarios_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: usuarios_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: usuarios_set_input
        pk_columns: usuarios_pk_columns_input!
    ): usuarios
    """
    update data of the table: "yugioh_names"
    """
    update_yugioh_names(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: yugioh_names_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: yugioh_names_set_input
        """
        filter the rows which have to be updated
        """
        where: yugioh_names_bool_exp!
    ): yugioh_names_mutation_response
    """
    update single row of the table: "yugioh_names"
    """
    update_yugioh_names_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: yugioh_names_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: yugioh_names_set_input
        pk_columns: yugioh_names_pk_columns_input!
    ): yugioh_names
}

"""
column ordering options
"""
enum order_by {
    """
    in ascending order, nulls last
    """
    asc
    """
    in ascending order, nulls first
    """
    asc_nulls_first
    """
    in ascending order, nulls last
    """
    asc_nulls_last
    """
    in descending order, nulls first
    """
    desc
    """
    in descending order, nulls first
    """
    desc_nulls_first
    """
    in descending order, nulls last
    """
    desc_nulls_last
}

type query_root {
    """
    fetch data from the table: "listas"
    """
    listas(
        """
        distinct select on columns
        """
        distinct_on: [listas_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [listas_order_by!]
        """
        filter the rows returned
        """
        where: listas_bool_exp
    ): [listas!]!
    """
    fetch aggregated fields from the table: "listas"
    """
    listas_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [listas_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [listas_order_by!]
        """
        filter the rows returned
        """
        where: listas_bool_exp
    ): listas_aggregate!
    """
    fetch data from the table: "listas" using primary key columns
    """
    listas_by_pk(id: Int!): listas
    """
    fetch data from the table: "usuarios"
    """
    usuarios(
        """
        distinct select on columns
        """
        distinct_on: [usuarios_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [usuarios_order_by!]
        """
        filter the rows returned
        """
        where: usuarios_bool_exp
    ): [usuarios!]!
    """
    fetch aggregated fields from the table: "usuarios"
    """
    usuarios_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [usuarios_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [usuarios_order_by!]
        """
        filter the rows returned
        """
        where: usuarios_bool_exp
    ): usuarios_aggregate!
    """
    fetch data from the table: "usuarios" using primary key columns
    """
    usuarios_by_pk(id: Int!): usuarios
    """
    fetch data from the table: "yugioh_names"
    """
    yugioh_names(
        """
        distinct select on columns
        """
        distinct_on: [yugioh_names_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [yugioh_names_order_by!]
        """
        filter the rows returned
        """
        where: yugioh_names_bool_exp
    ): [yugioh_names!]!
    """
    fetch aggregated fields from the table: "yugioh_names"
    """
    yugioh_names_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [yugioh_names_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [yugioh_names_order_by!]
        """
        filter the rows returned
        """
        where: yugioh_names_bool_exp
    ): yugioh_names_aggregate!
    """
    fetch data from the table: "yugioh_names" using primary key columns
    """
    yugioh_names_by_pk(id: Int!): yugioh_names
}

type subscription_root {
    """
    fetch data from the table: "listas"
    """
    listas(
        """
        distinct select on columns
        """
        distinct_on: [listas_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [listas_order_by!]
        """
        filter the rows returned
        """
        where: listas_bool_exp
    ): [listas!]!
    """
    fetch aggregated fields from the table: "listas"
    """
    listas_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [listas_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [listas_order_by!]
        """
        filter the rows returned
        """
        where: listas_bool_exp
    ): listas_aggregate!
    """
    fetch data from the table: "listas" using primary key columns
    """
    listas_by_pk(id: Int!): listas
    """
    fetch data from the table: "usuarios"
    """
    usuarios(
        """
        distinct select on columns
        """
        distinct_on: [usuarios_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [usuarios_order_by!]
        """
        filter the rows returned
        """
        where: usuarios_bool_exp
    ): [usuarios!]!
    """
    fetch aggregated fields from the table: "usuarios"
    """
    usuarios_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [usuarios_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [usuarios_order_by!]
        """
        filter the rows returned
        """
        where: usuarios_bool_exp
    ): usuarios_aggregate!
    """
    fetch data from the table: "usuarios" using primary key columns
    """
    usuarios_by_pk(id: Int!): usuarios
    """
    fetch data from the table: "yugioh_names"
    """
    yugioh_names(
        """
        distinct select on columns
        """
        distinct_on: [yugioh_names_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [yugioh_names_order_by!]
        """
        filter the rows returned
        """
        where: yugioh_names_bool_exp
    ): [yugioh_names!]!
    """
    fetch aggregated fields from the table: "yugioh_names"
    """
    yugioh_names_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [yugioh_names_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [yugioh_names_order_by!]
        """
        filter the rows returned
        """
        where: yugioh_names_bool_exp
    ): yugioh_names_aggregate!
    """
    fetch data from the table: "yugioh_names" using primary key columns
    """
    yugioh_names_by_pk(id: Int!): yugioh_names
}

"""
columns and relationships of "usuarios"
"""
type usuarios {
    email: String!
    id: Int!
    password: String!
}

"""
aggregated selection of "usuarios"
"""
type usuarios_aggregate {
    aggregate: usuarios_aggregate_fields
    nodes: [usuarios!]!
}

"""
aggregate fields of "usuarios"
"""
type usuarios_aggregate_fields {
    avg: usuarios_avg_fields
    count(columns: [usuarios_select_column!], distinct: Boolean): Int!
    max: usuarios_max_fields
    min: usuarios_min_fields
    stddev: usuarios_stddev_fields
    stddev_pop: usuarios_stddev_pop_fields
    stddev_samp: usuarios_stddev_samp_fields
    sum: usuarios_sum_fields
    var_pop: usuarios_var_pop_fields
    var_samp: usuarios_var_samp_fields
    variance: usuarios_variance_fields
}

"""
aggregate avg on columns
"""
type usuarios_avg_fields {
    id: Float
}

"""
Boolean expression to filter rows from the table "usuarios". All fields are combined with a logical 'AND'.
"""
input usuarios_bool_exp {
    _and: [usuarios_bool_exp!]
    _not: usuarios_bool_exp
    _or: [usuarios_bool_exp!]
    email: String_comparison_exp
    id: Int_comparison_exp
    password: String_comparison_exp
}

"""
unique or primary key constraints on table "usuarios"
"""
enum usuarios_constraint {
    """
    unique or primary key constraint
    """
    usuarios_pkey
}

"""
input type for incrementing numeric columns in table "usuarios"
"""
input usuarios_inc_input {
    id: Int
}

"""
input type for inserting data into table "usuarios"
"""
input usuarios_insert_input {
    email: String
    id: Int
    password: String
}

"""
aggregate max on columns
"""
type usuarios_max_fields {
    email: String
    id: Int
    password: String
}

"""
aggregate min on columns
"""
type usuarios_min_fields {
    email: String
    id: Int
    password: String
}

"""
response of any mutation on the table "usuarios"
"""
type usuarios_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [usuarios!]!
}

"""
on conflict condition type for table "usuarios"
"""
input usuarios_on_conflict {
    constraint: usuarios_constraint!
    update_columns: [usuarios_update_column!]! = []
    where: usuarios_bool_exp
}

"""
Ordering options when selecting data from "usuarios".
"""
input usuarios_order_by {
    email: order_by
    id: order_by
    password: order_by
}

"""
primary key columns input for table: usuarios
"""
input usuarios_pk_columns_input {
    id: Int!
}

"""
select columns of table "usuarios"
"""
enum usuarios_select_column {
    """
    column name
    """
    email
    """
    column name
    """
    id
    """
    column name
    """
    password
}

"""
input type for updating data in table "usuarios"
"""
input usuarios_set_input {
    email: String
    id: Int
    password: String
}

"""
aggregate stddev on columns
"""
type usuarios_stddev_fields {
    id: Float
}

"""
aggregate stddev_pop on columns
"""
type usuarios_stddev_pop_fields {
    id: Float
}

"""
aggregate stddev_samp on columns
"""
type usuarios_stddev_samp_fields {
    id: Float
}

"""
aggregate sum on columns
"""
type usuarios_sum_fields {
    id: Int
}

"""
update columns of table "usuarios"
"""
enum usuarios_update_column {
    """
    column name
    """
    email
    """
    column name
    """
    id
    """
    column name
    """
    password
}

"""
aggregate var_pop on columns
"""
type usuarios_var_pop_fields {
    id: Float
}

"""
aggregate var_samp on columns
"""
type usuarios_var_samp_fields {
    id: Float
}

"""
aggregate variance on columns
"""
type usuarios_variance_fields {
    id: Float
}

"""
columns and relationships of "yugioh_names"
"""
type yugioh_names {
    id: Int!
    name: String!
}

"""
aggregated selection of "yugioh_names"
"""
type yugioh_names_aggregate {
    aggregate: yugioh_names_aggregate_fields
    nodes: [yugioh_names!]!
}

"""
aggregate fields of "yugioh_names"
"""
type yugioh_names_aggregate_fields {
    avg: yugioh_names_avg_fields
    count(columns: [yugioh_names_select_column!], distinct: Boolean): Int!
    max: yugioh_names_max_fields
    min: yugioh_names_min_fields
    stddev: yugioh_names_stddev_fields
    stddev_pop: yugioh_names_stddev_pop_fields
    stddev_samp: yugioh_names_stddev_samp_fields
    sum: yugioh_names_sum_fields
    var_pop: yugioh_names_var_pop_fields
    var_samp: yugioh_names_var_samp_fields
    variance: yugioh_names_variance_fields
}

"""
aggregate avg on columns
"""
type yugioh_names_avg_fields {
    id: Float
}

"""
Boolean expression to filter rows from the table "yugioh_names". All fields are combined with a logical 'AND'.
"""
input yugioh_names_bool_exp {
    _and: [yugioh_names_bool_exp!]
    _not: yugioh_names_bool_exp
    _or: [yugioh_names_bool_exp!]
    id: Int_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "yugioh_names"
"""
enum yugioh_names_constraint {
    """
    unique or primary key constraint
    """
    yugioh_names_name_key
    """
    unique or primary key constraint
    """
    yugioh_names_pkey
}

"""
input type for incrementing numeric columns in table "yugioh_names"
"""
input yugioh_names_inc_input {
    id: Int
}

"""
input type for inserting data into table "yugioh_names"
"""
input yugioh_names_insert_input {
    id: Int
    name: String
}

"""
aggregate max on columns
"""
type yugioh_names_max_fields {
    id: Int
    name: String
}

"""
aggregate min on columns
"""
type yugioh_names_min_fields {
    id: Int
    name: String
}

"""
response of any mutation on the table "yugioh_names"
"""
type yugioh_names_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [yugioh_names!]!
}

"""
on conflict condition type for table "yugioh_names"
"""
input yugioh_names_on_conflict {
    constraint: yugioh_names_constraint!
    update_columns: [yugioh_names_update_column!]! = []
    where: yugioh_names_bool_exp
}

"""
Ordering options when selecting data from "yugioh_names".
"""
input yugioh_names_order_by {
    id: order_by
    name: order_by
}

"""
primary key columns input for table: yugioh_names
"""
input yugioh_names_pk_columns_input {
    id: Int!
}

"""
select columns of table "yugioh_names"
"""
enum yugioh_names_select_column {
    """
    column name
    """
    id
    """
    column name
    """
    name
}

"""
input type for updating data in table "yugioh_names"
"""
input yugioh_names_set_input {
    id: Int
    name: String
}

"""
aggregate stddev on columns
"""
type yugioh_names_stddev_fields {
    id: Float
}

"""
aggregate stddev_pop on columns
"""
type yugioh_names_stddev_pop_fields {
    id: Float
}

"""
aggregate stddev_samp on columns
"""
type yugioh_names_stddev_samp_fields {
    id: Float
}

"""
aggregate sum on columns
"""
type yugioh_names_sum_fields {
    id: Int
}

"""
update columns of table "yugioh_names"
"""
enum yugioh_names_update_column {
    """
    column name
    """
    id
    """
    column name
    """
    name
}

"""
aggregate var_pop on columns
"""
type yugioh_names_var_pop_fields {
    id: Float
}

"""
aggregate var_samp on columns
"""
type yugioh_names_var_samp_fields {
    id: Float
}

"""
aggregate variance on columns
"""
type yugioh_names_variance_fields {
    id: Float
}
